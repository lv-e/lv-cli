import { log } from "../helpers/helpers";
import { readFileSync } from "fs";
import { mode, rootFolders, projectContent } from "../index";
import chalk = require("chalk");
import { encodeScene } from "./encode_helpers/encode_scene";
import { encodeProject } from "./encode_helpers/encode_project";
import { encodeMain } from "./encode_helpers/encode_main";
import { encodeSharedDir } from "./encode_helpers/encode_shared";

const helpText = `
'encode' will receive a path to the project structure generated by 'scan'
 and encode files by its extension. the output will be a lot of .hstrip files
 and then, the source files ready to be compiled.`

 export let vflag:boolean = false
 export let outputDir:string
 export let project:projectContent

export async function encode(input:string, output:string, mode:mode) {
    if (mode == "help") log(true, helpText)
    else {

        outputDir = output
        vflag = mode == "verbose" ? true : false
        log(vflag, chalk.green("[command] ") + chalk.blue("encode"))

        // load project file
        const projectJson = readFileSync(input, "utf8")
        const projectData:rootFolders = JSON.parse(projectJson) 
        
        // encode project, this will download the engine library too
        project = encodeProject(projectData.project_file)
        
        // encode all scenes, this will generate .hstripes
        let promises = projectData.scenes.map(async (scene) => encodeScene(scene))
        let encodedScenes = await Promise.all(promises)
        
        // encode all shared files
        projectData.shared.map( dir => encodeSharedDir(dir))
        
        // encode main.c file
        encodeMain(encodedScenes)
    }
}