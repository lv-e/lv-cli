import { log, rand_salt, replaceAll, removeBlankLines, createDirs } from "../helpers/helpers";
import { readFileSync, readdir, readdirSync, writeFileSync } from "fs";
import { join } from "path";
import { mode, encoded, encoder, rootFolders, sceneMap, dirMap, fileMap, projectContent, blankEncoded } from "../index";
import shell from "shelljs";
import astyle from "astyle";
import { template_scene_cpp, template_scene_hpp, template_scene_include, template_main_c } from "../helpers/encoder_templates";
import chalk = require("chalk");
import { encodeScene } from "./encode_helpers/encode_scene";
import { encodeProject } from "./encode_helpers/encode_project";

const helpText = `
'encode' will receive a path to the project structure generated by 'scan'
 and encode files by its extension. the output will be a lot of .hstrip files.`

 export let vflag:boolean = false
 export let outputDir:string
 export let project:projectContent

export async function encode(input:string, output:string, mode:mode) {
    if (mode == "help") log(true, helpText)
    else {

        outputDir = output
        vflag = mode == "verbose" ? true : false
        log(vflag, chalk.green("[command] ") + chalk.blue("encode"))

        // load project file
        const projectJson = readFileSync(input, "utf8")
        const projectData:rootFolders = JSON.parse(projectJson) 
        
        // encode project, this will download the engine library too
        project = encodeProject(projectData.project_file)
        
        // encode all scenes, this will generate .hstripes
        let promises = await projectData.scenes.map( async scene => 
            await encodeScene(scene))
        let encodedScenes = await Promise.all(promises)
        
        // encode all shared files
        //data.shared.map( dir => encodeSharedDir(dir))
        
        encodeMainFiles(encodedScenes)
    }
} 

/*

function encodeSharedDir(dir:dirMap){

    log(vflag, chalk.blue("encoding shared folder: ") + chalk.cyan(dir.name))
    dir.files.forEach( file => encodeSharedFile(file))
    dir.directories.forEach( dir =>  encodeSharedDir(dir))

    const sharedSourceDir = join(outputDir, "source")
        
    let hppPath = join(sharedSourceDir, "shared.h")
    let cppPath = join(sharedSourceDir, "shared.c") 

    createDirs(hppPath)
    createDirs(cppPath)

}
    
function encodeSharedFile(file:fileMap) {
    encoders.forEach( encoder => {
        if (encoder.extension == file.extension) {
            log(vflag, "encoding shared file: " + file.name + " with " + encoder.npm_module)
            const outputFile = join(outputDir, "shared", "h-stripes", file.name + ".h-stripe")
            shell.exec(encoder.cli_command + " -i " + file.path + " -o " + outputFile)
        }
    })
}


async function mergeEncodedShared() {

    const sharedDir = join(outputDir, "shared", "h-stripes")
    log(vflag, "reducing encoded shared files under dir " + sharedDir)
    const files = readdirSync(sharedDir)

    let reduced:encoded = blankEncoded()
    reduced.include_directive = "#include \"shared.h\""

    files.forEach( file => {

        const filepath = join("shared", file)
        const jsonString = readFileSync(filepath, "utf8")
        const data:encoded = JSON.parse(jsonString)

        reduced.declarations   += removeBlankLines("\n" + (data.declarations || ""))
        reduced.on_awake       += removeBlankLines("\n" + (data.on_awake || ""))
        reduced.on_enter       += removeBlankLines("\n" + (data.on_enter || ""))
        reduced.on_frame       += removeBlankLines("\n" + (data.on_frame || ""))
        reduced.on_exit        += removeBlankLines("\n" + (data.on_exit  || ""))
    })

    function applyReplaces(subject:string) : string {
        let mutable = applySceneReplaces(subject, scene)
        mutable = replaceAll(mutable, "{{declarations}}", reduced.declarations || "")
        mutable = replaceAll(mutable, "{{on_awake}}", reduced.on_awake || "")
        mutable = replaceAll(mutable, "{{on_enter}}", reduced.on_enter || "")
        mutable = replaceAll(mutable, "{{on_frame}}", reduced.on_frame || "")
        mutable = replaceAll(mutable, "{{on_exit}}" , reduced.on_exit  || "")
        return mutable
    }

    let sceneCPPFile = await astyle.format(applyReplaces(template_scene_cpp))
    let sceneHPPFile = await astyle.format(applyReplaces(template_scene_hpp))

    return {hpp: sceneHPPFile, cpp: sceneCPPFile, encodedScene: reduced}
}*/

function encodeMainFiles(encodedScenes:encoded[]) {
    
    log(vflag, chalk.blue("generating main.c file"))

    let includes = encodedScenes.map( s => s.include_directive ).join("\n")
    let mainCode = replaceAll(template_main_c, "{{scene_includes}}", includes)
    let mainFilePath = join(outputDir, "source", "main.c")
    
    writeFileSync(mainFilePath, mainCode)
    log(vflag, "done! main.c can be found at: " + mainFilePath)
}