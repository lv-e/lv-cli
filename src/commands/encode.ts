import { log } from "../helpers/helpers";
import { readFileSync } from "fs";
import { RootFolders, DirMap, FileMap, SceneMap } from "./scan";
import { encoder, mode } from "lvcli";
import shell from "shelljs";

const helpText = `
'encode' will receive a path to the project structure generated by 'scan'
 and encode files by its extension.
 the output will be a .h strip.`

 let vflag:boolean = false

 const encoders:encoder[] = [
    { extension: ".lvcode", npm_module: "@lv-game-editor/encoder-lvcode", command: "lv-encoder-lvcode"},
    //{extension: ".lvsprite", npm_module: "lv-encoder-sprite"},
 ]

export function encode(input:string, output:string, mode:mode) {
    if (mode == "help") log(true, helpText)
    else {

        vflag = mode == "verbose" ? true : false
        log(vflag, "[command] encode")

        log(vflag, "updating node modules...")
        updateModules()

        const jsonString = readFileSync(input, "utf8")
        const data:RootFolders = JSON.parse(jsonString) 
        
        data.scenes.forEach( scene => {
            encodeScene(scene)
        })
    }
} 

function encodeScene(scene:SceneMap) {
    log(vflag, "encoding: " + scene.name)
    encodeDir(scene, scene)
}

function encodeDir(dir:DirMap, scene:SceneMap) {
    dir.directories.forEach( dir =>  encodeDir(dir, scene))
    dir.files.forEach( file => encodeFile(file, scene))
}

function updateModules(){
    encoders.forEach ( encoder => {
        if (!shell.which(encoder.command)){
            log(vflag, "updating encoder under npm module named " + encoder.npm_module)
            shell.exec("npm i -g " + encoder.npm_module)   
        }
    })
}

function encodeFile(file:FileMap, scene:SceneMap) {
    encoders.forEach( encoder => {
        if (encoder.extension == file.extension) {
            log(vflag, "encoding file: " + file.name + " with " + encoder.npm_module)
            shell.exec(encoder.command + " -i " + file.path + " -o /tmp/.build/" + file.name)
        }
    })
}