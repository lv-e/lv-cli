import { log, rand_salt, replaceAll, removeBlankLines, createDirs } from "../helpers/helpers";
import { readFileSync, readdir, readdirSync, writeFileSync } from "fs";
import { join } from "path";
import { mode, encoded, encoder } from "../index";
import { RootFolders, DirMap, FileMap, SceneMap } from "./scan";
import shell from "shelljs";
import astyle from "astyle";
import { template_cpp, template_hpp } from "../helpers/encoder_templates";

const helpText = `
'encode' will receive a path to the project structure generated by 'scan'
 and encode files by its extension.
 the output will be a .h strip.`

 let vflag:boolean = false
 let sceneID = 1
 let outputDir:string

 const encoders:encoder[] = [
    { extension: ".lvcode", npm_module: "@lv-game-editor/encoder-lvcode", command: "lv-encoder-lvcode"},
    //{extension: ".lvsprite", npm_module: "lv-encoder-sprite"},
 ]

export function encode(input:string, output:string, mode:mode) {
    if (mode == "help") log(true, helpText)
    else {

        outputDir = output
        vflag = mode == "verbose" ? true : false
        log(vflag, "[command] encode")

        log(vflag, "updating node modules...")
        updateModules()

        const jsonString = readFileSync(input, "utf8")
        const data:RootFolders = JSON.parse(jsonString) 
        
        data.scenes.forEach( scene => {
            encodeScene(scene)
        })
    }
} 

function encodeScene(scene:SceneMap) {
    log(vflag, "encoding: " + scene.name)
    encodeDir(scene, scene)
    mergeEncoded(scene).then( response => {
        const sceneSourceDir = join(outputDir, "source")
        
        let hppPath = join(sceneSourceDir, scene.name + ".h")
        let cppPath = join(sceneSourceDir, scene.name + ".c") 
        
        createDirs(hppPath)
        createDirs(cppPath)

        writeFileSync(hppPath, response.hpp)
        writeFileSync(cppPath, response.cpp)
    })
}

function encodeDir(dir:DirMap, scene:SceneMap) {
    dir.directories.forEach( dir =>  encodeDir(dir, scene))
    dir.files.forEach( file => encodeFile(file, scene))
}

function updateModules(){
    encoders.forEach ( encoder => {
        if (!shell.which(encoder.command)){
            log(vflag, "updating encoder under npm module named " + encoder.npm_module)
            shell.exec("npm i -g " + encoder.npm_module)   
        }
    })
}

function encodeFile(file:FileMap, scene:SceneMap) {
    encoders.forEach( encoder => {
        if (encoder.extension == file.extension) {
            log(vflag, "encoding file: " + file.name + " with " + encoder.npm_module)
            const outputFile = join(outputDir, scene.name, "h-stripes", file.name + ".h-stripe")
            shell.exec(encoder.command + " -i " + file.path + " -o " + outputFile)
        }
    })
}

async function mergeEncoded(scene:SceneMap) {

    const sceneDir = join(outputDir, scene.name, "h-stripes")
    log(vflag, "reducing encoded scene files under dir " + sceneDir)
    const files = readdirSync(sceneDir)

    let reduced:encoded = {
        declarations: "",
        on_awake: "",
        on_enter: "",
        on_frame: "",
        on_exit: ""
    }

    files.forEach( file => {

        const filepath = join(sceneDir, file)
        const jsonString = readFileSync(filepath, "utf8")
        const data:encoded = JSON.parse(jsonString)

        reduced.declarations   += removeBlankLines("\n" + (data.declarations || ""))
        reduced.on_awake       += removeBlankLines("\n" + (data.on_awake || ""))
        reduced.on_enter       += removeBlankLines("\n" + (data.on_enter || ""))
        reduced.on_frame       += removeBlankLines("\n" + (data.on_frame || ""))
        reduced.on_exit        += removeBlankLines("\n" + (data.on_exit || ""))
        
    })

    function applyReplaces(subject:string) : string {
        let mutable = subject
        mutable = replaceAll(mutable, "{{scene_name}}", scene.name)
        mutable = replaceAll(mutable, "{{uppercased_scene_name}}", scene.name.toUpperCase())
        mutable = replaceAll(mutable, "{{scene_id}}", " " + (sceneID++))
        mutable = replaceAll(mutable, "{{declarations}}", reduced.declarations)
        mutable = replaceAll(mutable, "{{on_awake}}", reduced.on_awake)
        mutable = replaceAll(mutable, "{{on_enter}}", reduced.on_enter)
        mutable = replaceAll(mutable, "{{on_frame}}", reduced.on_frame)
        mutable = replaceAll(mutable, "{{on_exit}}", reduced.on_exit)
        return mutable
    }

    let sceneCPPFile = await astyle.format(applyReplaces(template_cpp))
    let sceneHPPFile = await astyle.format(applyReplaces(template_hpp))

    return {hpp: sceneHPPFile, cpp: sceneCPPFile}
}