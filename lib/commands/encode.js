"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = exports.project = exports.outputDir = exports.vflag = void 0;
const fs_1 = require("fs");
const helpers_1 = require("../helpers/helpers");
const encode_project_1 = require("./encode_helpers/encode_project");
const encode_scene_1 = require("./encode_helpers/encode_scene");
const encode_shared_1 = require("./encode_helpers/encode_shared");
const helpText = `
'encode' will receive a path to the project structure generated by 'scan'
 and encode files by its extension. the output will be a lot of .hstrip files
 and then, the source files ready to be compiled.`;
exports.vflag = false;
function encode(input, output, mode) {
    return __awaiter(this, void 0, void 0, function* () {
        if (mode == "help")
            helpers_1.log(true, helpText);
        else {
            exports.outputDir = output;
            exports.vflag = mode == "verbose" ? true : false;
            helpers_1.log(exports.vflag, "[command] " + "encode");
            // load project file
            const projectJson = fs_1.readFileSync(input, "utf8");
            const projectData = JSON.parse(projectJson);
            // encode project, this will download the engine library too
            exports.project = encode_project_1.encodeProject(projectData.project_file);
            // encode all scenes, this will generate .hstripes
            let promises = projectData.scenes.map((scene) => __awaiter(this, void 0, void 0, function* () { return encode_scene_1.encodeScene(scene); }));
            yield Promise.all(promises);
            // encode all shared files & dirs
            yield encode_shared_1.encodeShared(projectData.shared);
            helpers_1.log(exports.vflag, "done encoding!");
        }
    });
}
exports.encode = encode;
