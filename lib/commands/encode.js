"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers/helpers");
const fs_1 = require("fs");
const shelljs_1 = __importDefault(require("shelljs"));
const helpText = `
'encode' will receive a path to the project structure generated by 'scan'
 and encode files by its extension.
 the output will be a .h strip.`;
let vflag = false;
const encoders = [
    { extension: ".lvcode", npm_module: "@lv-game-editor/encoder-lvcode", command: "lv-encoder-lvcode" },
];
function encode(input, output, mode) {
    if (mode == "help")
        helpers_1.log(true, helpText);
    else {
        vflag = mode == "verbose" ? true : false;
        helpers_1.log(vflag, "[command] encode");
        helpers_1.log(vflag, "updating node modules...");
        updateModules();
        const jsonString = fs_1.readFileSync(input, "utf8");
        const data = JSON.parse(jsonString);
        data.scenes.forEach(scene => {
            encodeScene(scene);
        });
    }
}
exports.encode = encode;
function encodeScene(scene) {
    helpers_1.log(vflag, "encoding: " + scene.name);
    encodeDir(scene, scene);
}
function encodeDir(dir, scene) {
    dir.directories.forEach(dir => encodeDir(dir, scene));
    dir.files.forEach(file => encodeFile(file, scene));
}
function updateModules() {
    encoders.forEach(encoder => {
        if (!shelljs_1.default.which("zabu")) {
            helpers_1.log(vflag, "updating encoder under npm module named " + encoder.npm_module);
            shelljs_1.default.exec("npm i -g " + encoder.npm_module);
        }
    });
}
function encodeFile(file, scene) {
    encoders.forEach(encoder => {
        if (encoder.extension == file.extension) {
            helpers_1.log(vflag, "encoding file: " + file.name + " with " + encoder.npm_module);
            shelljs_1.default.exec(encoder.command + " -i " + file.path + " -o /tmp/.build/" + file.name);
        }
    });
}
